package com.github.igoryeremin.maven.reporting.doxygen;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Locale;

import org.apache.maven.plugin.logging.Log;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.reporting.AbstractMavenReport;
import org.apache.maven.reporting.MavenReportException;

/**
 * Runs Doxygen to generate API documentation.
 */
@Mojo(name = "report", requiresProject = true)
public class Report extends AbstractMavenReport {
	@Override
	public String getDescription(Locale locale) {
		return "Doxygen API documentation.";
	}

	@Override
	public String getName(Locale locale) {
		return "Doxygen";
	}

	/**
	 * Doxygen config file location.
	 */
	@Parameter(defaultValue = "${basedir}/src/doxygen/doxygen.config")
	private File doxygenConf;

	/**
	 * Doxygen output directory.
	 */
	@Parameter(defaultValue = "${project.reporting.outputDirectory}/doxygen")
	private File outputDirectory;

	/**
	 * Doxygen INPUT parameter.
	 */
	@Parameter(defaultValue = "${basedir}/src")
	private File input;

	/**
	 * Doxygen executable name. Default assume it's within the PATH.
	 */
	@Parameter(defaultValue = "doxygen")
	private String executableName;

	@Parameter(readonly = true, defaultValue = "${project.build.directory}/doxygen.config")
	private File derivedDoxygenConf;

	@Override
	public String getOutputName() {
		return "doxygen/html/index";
	}

	@Override
	public boolean isExternalReport() {
		return true;
	}

	@Override
	protected void executeReport(Locale locale) throws MavenReportException {
		Log log = getLog();
		log.info("derivedDoxygenConf: " + derivedDoxygenConf.getName());
		log.info("derivedDoxygenConf: " + derivedDoxygenConf.getName());
		deriveConfFile();

		try {
			ProcessBuilder builder = new ProcessBuilder(executableName, derivedDoxygenConf.getPath());
			builder.redirectErrorStream(true);
			Process shell = builder.start();

			BufferedReader shellReader = new BufferedReader(new InputStreamReader(shell.getInputStream()));

			String line = null;
			while ((line = shellReader.readLine()) != null) {
				log.info(line);
			}

			int result = shell.waitFor();
			if (result != 0)
				throw new MavenReportException("Doxygen exited with error code: " + result);

		} catch (InterruptedException e) {
			throw new MavenReportException("Error running Doxygen", e);
		} catch (IOException e) {
			throw new MavenReportException("Error running Doxygen", e);
		}
	}

	/**
	 * Combines our plugin settings with existing Doxygen config file
	 */
	private void deriveConfFile() throws MavenReportException {
		try {
			BufferedWriter derivedWriter = new BufferedWriter(new FileWriter(derivedDoxygenConf));

			derivedWriter.write("# Settings generated by " + Report.class.getPackage().getName());
			derivedWriter.newLine();
			derivedWriter.write("PROJECT_NAME = \"" + getProject().getArtifactId() + "\"");
			derivedWriter.newLine();
			derivedWriter.write("PROJECT_NUMBER = \"" + getProject().getVersion() + "\"");
			derivedWriter.newLine();
			derivedWriter.write("OUTPUT_DIRECTORY = \"" + outputDirectory + "\"");
			derivedWriter.newLine();
			derivedWriter.write("INPUT = \"" + input + "\"");
			derivedWriter.newLine();
			derivedWriter.write("RECURSIVE = YES");
			derivedWriter.newLine();
			derivedWriter.write("# End of generated settings");
			derivedWriter.newLine();
			derivedWriter.newLine();

			BufferedReader confReader = new BufferedReader(new FileReader(doxygenConf));
			String line = null;
			while ((line = confReader.readLine()) != null) {
				derivedWriter.write(line);
				derivedWriter.newLine();
			}

			derivedWriter.close();
			confReader.close();
		} catch (FileNotFoundException e) {
			throw new MavenReportException("Doxygen config file not found", e);
		} catch (IOException e) {
			throw new MavenReportException("Error deriving Doxygen config file", e);
		}

	}
}
